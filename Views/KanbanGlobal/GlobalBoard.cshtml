@model ProjektZeiterfassung.ViewModels.KanbanBoardViewModel
@{
    ViewData["Title"] = "Global Kanban Board";
    // List of default priority levels
    var priorities = new Dictionary<int, (string name, string color)> {
        { 0, ("Low", "text-muted") },
        { 1, ("Normal", "text-primary") },
        { 2, ("High", "text-warning") },
        { 3, ("Critical", "text-danger") }
    };
    // Set a different layout for the Board view to use full width
    Layout = "_FullWidthLayout";
}

<div class="d-flex justify-content-between mb-3 align-items-center">
    <h1>Global Kanban Board</h1>
    <div>
        <a asp-controller="Kanban" asp-action="Index" class="btn btn-outline-primary">
            <i class="bi bi-arrow-left"></i> Back to Projects
        </a>
        <button id="refreshButton" class="btn btn-outline-info" onclick="refreshBoard()">
            <i class="bi bi-arrow-clockwise"></i> Refresh
        </button>
    </div>
</div>

<!-- Filter section -->
<div class="card mb-3">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h4 class="mb-0">Filter Tasks</h4>
        <button class="btn btn-sm btn-light" type="button" data-bs-toggle="collapse" data-bs-target="#filterCollapse" aria-expanded="false" aria-controls="filterCollapse">
            <i class="bi bi-funnel"></i> Toggle Filters
        </button>
    </div>
    <div class="collapse @(Model.FilterAssignedTo.HasValue || Model.FilterDueDate.HasValue ? "show" : "")" id="filterCollapse">
        <div class="card-body">
            <form id="filterForm" method="get" class="row g-3">
                <div class="col-md-4">
                    <label for="assigned" class="form-label">Assigned To</label>
                    <select id="assigned" name="assigned" class="form-select">
                        <option value="">All Employees</option>
                        @if (Model.Mitarbeiter != null)
                        {
                            foreach (var mitarbeiter in Model.Mitarbeiter)
                            {
                                if (Model.FilterAssignedTo == mitarbeiter.MitarbeiterNr)
                                {
                                    <option value="@mitarbeiter.MitarbeiterNr" selected>
                                        @mitarbeiter.Vorname @mitarbeiter.Name
                                    </option>
                                }
                                else
                                {
                                    <option value="@mitarbeiter.MitarbeiterNr">
                                        @mitarbeiter.Vorname @mitarbeiter.Name
                                    </option>
                                }
                            }
                        }
                    </select>
                </div>
                <div class="col-md-4">
                    <label for="due" class="form-label">Due Date</label>
                    <input type="date" id="due" name="due" class="form-control" value="@(Model.FilterDueDate?.ToString("yyyy-MM-dd"))" />
                </div>
                <div class="col-md-4">
                    <label for="searchFilter" class="form-label">Search</label>
                    <div class="input-group">
                        <input type="text" id="searchFilter" class="form-control" placeholder="Search by title or description...">
                        <button type="button" id="searchBtn" class="btn btn-outline-secondary">
                            <i class="bi bi-search"></i>
                        </button>
                    </div>
                </div>
                <div class="col-md-12 d-flex justify-content-end mt-3">
                    <div class="d-flex gap-2">
                        <button type="submit" class="btn btn-primary">Apply Filters</button>
                        <a href="@Url.Action("GlobalBoard")" class="btn btn-outline-secondary">Clear</a>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="kanban-container">
    @if (Model.Buckets == null || !Model.Buckets.Any())
    {
        <div class="alert alert-warning">
            <p>No buckets defined for any project.</p>
            <a asp-controller="Kanban" asp-action="Index" class="btn btn-primary">
                Go to Projects
            </a>
        </div>
    }
    else
    {
        <div class="kanban-board">
            @foreach (var bucket in Model.Buckets)
            {
                <div class="kanban-column" data-bucket-id="@bucket.BucketID" data-bucket-name="@bucket.Name">
                    <div class="kanban-column-header" style="background-color: @bucket.Farbe">
                        <h4>@bucket.Name</h4>
                        <span class="badge bg-light text-dark">
                            @(Model.Karten?.Count(c => c.Bucket?.Name == bucket.Name) ?? 0)
                        </span>
                    </div>
                    <div class="kanban-column-body" id="bucket-@bucket.Name.Replace(" ", "_")">
                        @if (Model.Karten != null)
                        {
                            var bucketCards = Model.Karten.Where(c => c.Bucket?.Name == bucket.Name).OrderBy(c => c.Position).ToList();
                            foreach (var card in bucketCards)
                            {
                                <div class="kanban-card" data-card-id="@card.CardID" data-position="@card.Position">
                                    <div class="kanban-card-header">
                                        <h5 class="kanban-card-title">@card.Titel</h5>
                                        <div class="kanban-card-actions">
                                            <a asp-controller="Kanban" asp-action="EditCard" asp-route-id="@card.CardID" class="btn btn-sm btn-outline-primary">
                                                <i class="bi bi-pencil"></i>
                                            </a>
                                        </div>
                                    </div>
                                    <div class="kanban-card-body">
                                        @if (!string.IsNullOrEmpty(card.Beschreibung))
                                        {
                                            <p>@card.Beschreibung</p>
                                        }
                                        <div class="badge bg-info mb-2">@card.Projekt?.Projektbezeichnung</div>
                                    </div>
                                    <div class="kanban-card-footer">
                                        @if (card.ZugewiesenAn.HasValue)
                                        {
                                            var mitarbeiter = Model.Mitarbeiter?.FirstOrDefault(m => m.MitarbeiterNr == card.ZugewiesenAn.Value);
                                            if (mitarbeiter != null)
                                            {
                                                <div class="kanban-card-assignee">
                                                    <i class="bi bi-person-fill"></i>
                                                    @mitarbeiter.Vorname @mitarbeiter.Name
                                                </div>
                                            }
                                        }
                                        @if (card.Prioritaet > 0 && priorities.ContainsKey(card.Prioritaet))
                                        {
                                            var (name, color) = priorities[card.Prioritaet];
                                            <div class="kanban-card-priority @color">
                                                <i class="bi bi-flag-fill"></i> @name
                                            </div>
                                        }
                                        @if (card.FaelligAm.HasValue)
                                        {
                                            var daysLeft = (card.FaelligAm.Value.Date - DateTime.Today).Days;
                                            var dateClass = daysLeft < 0 ? "text-danger" : (daysLeft <= 2 ? "text-warning" : "text-info");
                                            <div class="kanban-card-due-date @dateClass">
                                                <i class="bi bi-calendar"></i> @card.FaelligAm.Value.ToString("dd.MM.yyyy")
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            }
        </div>
    }
</div>

<div id="errorContainer" style="display:none;" class="alert alert-danger alert-dismissible fade show fixed-top mx-auto mt-3" style="max-width:500px; z-index:9999;">
    <span id="errorMessage"></span>
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
</div>

@section Styles {
    <style>
        body {
            overflow-x: auto;
        }
        .kanban-container {
            overflow-x: auto;
            padding-bottom: 1rem;
            width: 100%;
        }
        .kanban-board {
            display: flex;
            min-height: 70vh;
            gap: 1rem;
            width: 100%;
        }
        .kanban-column {
            flex: 1;
            min-width: 280px;
            max-width: 350px;
            display: flex;
            flex-direction: column;
            background-color: #f8f9fa;
            border-radius: 4px;
            border: 1px solid #ddd;
        }
        .kanban-column-header {
            padding: 10px;
            font-weight: bold;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid #ddd;
            border-radius: 4px 4px 0 0;
            color: white;
        }
        .kanban-column-body {
            flex: 1;
            padding: 10px;
            min-height: 200px;
            overflow-y: auto;
            max-height: calc(100vh - 300px);
        }
        .kanban-card {
            background-color: white;
            border: 1px solid #ddd;
            border-radius: 4px;
            margin-bottom: 10px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }
        .kanban-card-header {
            padding: 10px;
            border-bottom: 1px solid #ddd;
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
        }
        .kanban-card-title {
            font-size: 1rem;
            margin: 0;
            word-break: break-word;
        }
        .kanban-card-actions {
            display: flex;
            gap: 5px;
        }
        .kanban-card-body {
            padding: 10px;
        }
        .kanban-card-body p {
            margin-bottom: 0;
            font-size: 0.9rem;
            word-break: break-word;
        }
        .kanban-card-footer {
            padding: 10px;
            border-top: 1px solid #eee;
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            font-size: 0.8rem;
        }
        .kanban-card-assignee, .kanban-card-priority, .kanban-card-due-date {
            display: flex;
            align-items: center;
            gap: 4px;
        }
        .dragging {
            opacity: 0.5;
        }
        .drag-over {
            border: 2px dashed #007bff;
        }
        /* Full width container overrides */
        .container-full {
            width: 100% !important;
            max-width: none !important;
            padding: 0 20px;
        }
        /* Responsive design */
        .kanban-column {
            min-width: 250px;
        }
        #refreshButton {
            transition: transform 0.5s;
        }
        #refreshButton.refreshing {
            transform: rotate(360deg);
        }
        /* Hide filtered cards */
        .filtered-out {
            display: none;
        }
    </style>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const errorContainer = document.getElementById('errorContainer');
            const errorMessage = document.getElementById('errorMessage');
            const searchFilter = document.getElementById('searchFilter');
            const searchBtn = document.getElementById('searchBtn');
            
            // Helper function to show errors
            function showError(message) {
                errorMessage.textContent = message;
                errorContainer.style.display = 'block';
                // Hide after 5 seconds
                setTimeout(() => {
                    errorContainer.style.display = 'none';
                }, 5000);
            }
            
            // Search functionality
            function performSearch() {
                const searchText = searchFilter.value.toLowerCase();
                const cards = document.querySelectorAll('.kanban-card');
                
                if (!searchText) {
                    // If search is empty, show all cards
                    cards.forEach(card => {
                        card.classList.remove('filtered-out');
                    });
                    return;
                }
                
                cards.forEach(card => {
                    const title = card.querySelector('.kanban-card-title').textContent.toLowerCase();
                    const description = card.querySelector('.kanban-card-body').textContent.toLowerCase();
                    
                    if (title.includes(searchText) || description.includes(searchText)) {
                        card.classList.remove('filtered-out');
                    } else {
                        card.classList.add('filtered-out');
                    }
                });
                
                // Update counter badges
                const columns = document.querySelectorAll('.kanban-column');
                columns.forEach(column => {
                    const cards = column.querySelectorAll('.kanban-card:not(.filtered-out)');
                    const badge = column.querySelector('.badge');
                    if (badge) {
                        badge.textContent = cards.length;
                    }
                });
            }
            
            if (searchBtn) {
                searchBtn.addEventListener('click', performSearch);
            }
            
            if (searchFilter) {
                searchFilter.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        performSearch();
                    }
                });
            }
            
            // Function to refresh the board data
            window.refreshBoard = function() {
                const refreshButton = document.getElementById('refreshButton');
                refreshButton.classList.add('refreshing');
                refreshButton.disabled = true;
                
                // Get filter values
                const assignedFilter = document.getElementById('assigned')?.value;
                const dueFilter = document.getElementById('due')?.value;
                
                // Prepare parameters for the fetch request
                const params = new URLSearchParams();
                if (assignedFilter) params.append('assignedTo', assignedFilter);
                if (dueFilter) params.append('dueDate', dueFilter);
                
                const csrfToken = document.querySelector('input[name="__RequestVerificationToken"]').value;
                
                fetch('@Url.Action("RefreshGlobalCards", "KanbanGlobal")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'RequestVerificationToken': csrfToken
                    },
                    body: params
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        // Process the cards by bucket name
                        Object.entries(data.cards).forEach(([bucketName, cards]) => {
                            const bucketId = bucketName.replace(/\s+/g, '_');
                            const column = document.getElementById(`bucket-${bucketId}`);
                            
                            if (column) {
                                column.innerHTML = '';
                                cards.forEach(card => {
                                    renderCard(column, card);
                                });
                            }
                        });
                        
                        // If search filter is active, reapply it
                        if (searchFilter.value) {
                            performSearch();
                        }
                    } else {
                        showError(data.message || 'Error refreshing data');
                    }
                })
                .catch(error => {
                    showError(`Error refreshing data: ${error.message}`);
                })
                .finally(() => {
                    refreshButton.classList.remove('refreshing');
                    refreshButton.disabled = false;
                });
            };
            
            // Helper function to render a card
            function renderCard(column, card) {
                const cardDiv = document.createElement('div');
                cardDiv.className = 'kanban-card';
                cardDiv.dataset.cardId = card.cardID;
                cardDiv.dataset.position = card.position;
                
                // Create header
                const header = document.createElement('div');
                header.className = 'kanban-card-header';
                const title = document.createElement('h5');
                title.className = 'kanban-card-title';
                title.textContent = card.titel;
                const actions = document.createElement('div');
                actions.className = 'kanban-card-actions';
                
                actions.innerHTML = `
                    <a href="@Url.Content("~/Kanban/EditCard/")${card.cardID}" class="btn btn-sm btn-outline-primary">
                        <i class="bi bi-pencil"></i>
                    </a>
                `;
                
                header.appendChild(title);
                header.appendChild(actions);
                cardDiv.appendChild(header);
                
                // Create body with description and project name
                const body = document.createElement('div');
                body.className = 'kanban-card-body';
                
                if (card.beschreibung) {
                    const desc = document.createElement('p');
                    desc.textContent = card.beschreibung;
                    body.appendChild(desc);
                }
                
                if (card.projektName) {
                    const projectBadge = document.createElement('div');
                    projectBadge.className = 'badge bg-info mb-2';
                    projectBadge.textContent = card.projektName;
                    body.appendChild(projectBadge);
                }
                
                cardDiv.appendChild(body);
                
                // Create footer with assignee, priority, and due date
                const footer = document.createElement('div');
                footer.className = 'kanban-card-footer';
                
                // Add assignee if available
                if (card.zugewiesenAnMitarbeiter) {
                    const assignee = document.createElement('div');
                    assignee.className = 'kanban-card-assignee';
                    assignee.innerHTML = `
                        <i class="bi bi-person-fill"></i>
                        ${card.zugewiesenAnMitarbeiter.vorname} ${card.zugewiesenAnMitarbeiter.name}
                    `;
                    footer.appendChild(assignee);
                }
                
                // Add priority if available
                const priorities = {
                    0: { name: 'Low', color: 'text-muted' },
                    1: { name: 'Normal', color: 'text-primary' },
                    2: { name: 'High', color: 'text-warning' },
                    3: { name: 'Critical', color: 'text-danger' }
                };
                
                if (card.prioritaet > 0 && priorities[card.prioritaet]) {
                    const priority = document.createElement('div');
                    priority.className = `kanban-card-priority ${priorities[card.prioritaet].color}`;
                    priority.innerHTML = `
                        <i class="bi bi-flag-fill"></i> ${priorities[card.prioritaet].name}
                    `;
                    footer.appendChild(priority);
                }
                
                // Add due date if available
                if (card.faelligAm) {
                    const dueDate = new Date(card.faelligAm);
                    const today = new Date();
                    today.setHours(0, 0, 0, 0);
                    const daysLeft = Math.floor((dueDate - today) / (1000 * 60 * 60 * 24));
                    const dateClass = daysLeft < 0 ? 'text-danger' : (daysLeft <= 2 ? 'text-warning' : 'text-info');
                    
                    const due = document.createElement('div');
                    due.className = `kanban-card-due-date ${dateClass}`;
                    
                    // Format date as dd.MM.yyyy
                    const day = dueDate.getDate().toString().padStart(2, '0');
                    const month = (dueDate.getMonth() + 1).toString().padStart(2, '0');
                    const year = dueDate.getFullYear();
                    const formattedDate = `${day}.${month}.${year}`;
                    
                    due.innerHTML = `
                        <i class="bi bi-calendar"></i> ${formattedDate}
                    `;
                    footer.appendChild(due);
                }
                
                cardDiv.appendChild(footer);
                column.appendChild(cardDiv);
            }
        });
    </script>
}